{
  "detection_time": "2025-06-28T16:41:19.861600",
  "total_files": 149,
  "total_stubs": 32,
  "stub_functions": [
    {
      "file_path": "src\\web_app.py",
      "line_number": 902,
      "function_name": "index",
      "class_name": "",
      "stub_type": "temp",
      "description": "临时函数",
      "severity": "high",
      "context": "def index():\n    \"\"\"Serve the main web interface.\"\"\"\n    return render_template('index.html')"
    },
    {
      "file_path": "src\\web_app.py",
      "line_number": 907,
      "function_name": "demo",
      "class_name": "",
      "stub_type": "demo",
      "description": "演示函数",
      "severity": "low",
      "context": "def demo():\n    \"\"\"Demo page\"\"\"\n    return render_template('demo.html')"
    },
    {
      "file_path": "src\\web_app.py",
      "line_number": 912,
      "function_name": "enhanced_frontend_complete",
      "class_name": "",
      "stub_type": "temp",
      "description": "临时函数",
      "severity": "high",
      "context": "def enhanced_frontend_complete():\n    \"\"\"Enhanced frontend complete page\"\"\"\n    return render_template('enhanced-frontend-complete.html')"
    },
    {
      "file_path": "src\\web_app.py",
      "line_number": 2654,
      "function_name": "dashboard",
      "class_name": "",
      "stub_type": "temp",
      "description": "临时函数",
      "severity": "high",
      "context": "def dashboard():\n    \"\"\"仪表板页面\"\"\"\n    return render_template('dashboard.html')"
    },
    {
      "file_path": "src\\web_app.py",
      "line_number": 2708,
      "function_name": "get_api_health",
      "class_name": "",
      "stub_type": "todo_fixme",
      "description": "包含TODO或FIXME注释",
      "severity": "high",
      "context": "def get_api_health():\n    \"\"\"获取API健康状态\"\"\"\n    try:\n        health_data = {\n            'endpoints': []\n        }\n\n        if orchestrator and hasattr(orchestrator.llm_client, 'get_health_status'):\n   ..."
    },
    {
      "file_path": "src\\web_app.py",
      "line_number": 2804,
      "function_name": "get_processing_history",
      "class_name": "",
      "stub_type": "todo_fixme",
      "description": "包含TODO或FIXME注释",
      "severity": "high",
      "context": "def get_processing_history():\n    \"\"\"获取处理历史记录\"\"\"\n    try:\n        page = int(request.args.get('page', 1))\n        size = int(request.args.get('size', 10))\n        filter_type = request.args.get('filte..."
    },
    {
      "file_path": "src\\web_app.py",
      "line_number": 2849,
      "function_name": "export_performance_data",
      "class_name": "",
      "stub_type": "todo_fixme",
      "description": "包含TODO或FIXME注释",
      "severity": "high",
      "context": "def export_performance_data():\n    \"\"\"导出性能数据\"\"\"\n    try:\n        data = request.get_json()\n        filter_type = data.get('filter', 'all')\n        format_type = data.get('format', 'csv')\n\n        # TO..."
    },
    {
      "file_path": "src\\web_app.py",
      "line_number": 2878,
      "function_name": "batch_page",
      "class_name": "",
      "stub_type": "temp",
      "description": "临时函数",
      "severity": "high",
      "context": "def batch_page():\n    \"\"\"批量处理页面\"\"\"\n    return render_template('batch.html')"
    },
    {
      "file_path": "src\\core\\resource_manager.py",
      "line_number": 352,
      "function_name": "create_template",
      "class_name": "",
      "stub_type": "temp",
      "description": "临时函数",
      "severity": "high",
      "context": "def create_template(template_id: str, content: Dict[str, Any]) -> bool:\n    \"\"\"便捷函数：创建模板\"\"\"\n    return resource_manager.create_template(template_id, content)"
    },
    {
      "file_path": "src\\core\\resource_manager.py",
      "line_number": 357,
      "function_name": "find_template",
      "class_name": "",
      "stub_type": "temp",
      "description": "临时函数",
      "severity": "high",
      "context": "def find_template(template_id: str) -> Optional[Dict[str, Any]]:\n    \"\"\"便捷函数：查找模板\"\"\"\n    return resource_manager.find_template(template_id)"
    },
    {
      "file_path": "src\\core\\analysis\\efficient_document_classifier.py",
      "line_number": 431,
      "function_name": "_load_precise_templates",
      "class_name": "",
      "stub_type": "temp",
      "description": "临时函数",
      "severity": "high",
      "context": "    def _load_precise_templates(self) -> Dict[str, Any]:\n        \"\"\"加载精确识别模板\"\"\"\n        # 这里可以加载预训练的模板或模型\n        return {}"
    },
    {
      "file_path": "src\\core\\analysis\\precise_format_applier.py",
      "line_number": 48,
      "function_name": "__init__",
      "class_name": "",
      "stub_type": "temp",
      "description": "临时函数",
      "severity": "high",
      "context": "    def __init__(self, templates_dir: str = \"src/core/knowledge_base/format_templates\"):\n        self.templates_dir = templates_dir\n        self.format_extractor = PreciseFormatExtractor(templates_dir..."
    },
    {
      "file_path": "src\\core\\analysis\\precise_format_applier.py",
      "line_number": 461,
      "function_name": "_generate_pdf_document",
      "class_name": "",
      "stub_type": "temp",
      "description": "临时函数",
      "severity": "high",
      "context": "    def _generate_pdf_document(self, content_elements: List[ContentElement], \n                              template_data: Dict[str, Any], output_path: str = None) -> Dict[str, Any]:\n        \"\"\"生成PDF文..."
    },
    {
      "file_path": "src\\core\\analysis\\precise_format_applier.py",
      "line_number": 466,
      "function_name": "_generate_excel_document",
      "class_name": "",
      "stub_type": "temp",
      "description": "临时函数",
      "severity": "high",
      "context": "    def _generate_excel_document(self, content_elements: List[ContentElement], \n                                template_data: Dict[str, Any], output_path: str = None) -> Dict[str, Any]:\n        \"\"\"生成..."
    },
    {
      "file_path": "src\\core\\analysis\\precise_format_applier.py",
      "line_number": 471,
      "function_name": "_generate_ppt_document",
      "class_name": "",
      "stub_type": "temp",
      "description": "临时函数",
      "severity": "high",
      "context": "    def _generate_ppt_document(self, content_elements: List[ContentElement], \n                              template_data: Dict[str, Any], output_path: str = None) -> Dict[str, Any]:\n        \"\"\"生成Powe..."
    },
    {
      "file_path": "src\\core\\database\\models.py",
      "line_number": 124,
      "function_name": "set_config",
      "class_name": "",
      "stub_type": "temp",
      "description": "临时函数",
      "severity": "high",
      "context": "    def set_config(self, config: Dict[str, Any]):\n        \"\"\"设置模板配置（转换为JSON）\"\"\"\n        self.template_config = json.dumps(config, ensure_ascii=False)"
    },
    {
      "file_path": "src\\core\\tools\\document_format_extractor.py",
      "line_number": 654,
      "function_name": "_generate_template_id",
      "class_name": "",
      "stub_type": "temp",
      "description": "临时函数",
      "severity": "high",
      "context": "    def _generate_template_id(self, document_name: str, format_rules: Dict[str, Any]) -> str:\n        \"\"\"生成模板ID\"\"\"\n        # 基于文档名和格式规则生成唯一ID\n        content = f\"{document_name}_{json.dumps(format_rul..."
    },
    {
      "file_path": "src\\core\\tools\\llm_style_analyzer.py",
      "line_number": 223,
      "function_name": "__init__",
      "class_name": "",
      "stub_type": "temp",
      "description": "临时函数",
      "severity": "high",
      "context": "    def __init__(self, llm_client=None):\n        self.llm_client = llm_client\n        self.templates = LLMStylePromptTemplates()"
    },
    {
      "file_path": "src\\core\\tools\\writing_style_analyzer.py",
      "line_number": 1696,
      "function_name": "_generate_template_id",
      "class_name": "",
      "stub_type": "temp",
      "description": "临时函数",
      "severity": "high",
      "context": "    def _generate_template_id(self, document_name: str, features: Dict[str, Any]) -> str:\n        \"\"\"生成文风模板ID\"\"\"\n        content = f\"{document_name}_{json.dumps(features, sort_keys=True)}\"\n        ret..."
    },
    {
      "file_path": "tests\\simple_web_app.py",
      "line_number": 84,
      "function_name": "index",
      "class_name": "",
      "stub_type": "temp",
      "description": "临时函数",
      "severity": "high",
      "context": "def index():\n    \"\"\"主页\"\"\"\n    return render_template('index.html')"
    },
    {
      "file_path": "tests\\simple_web_app.py",
      "line_number": 385,
      "function_name": "batch_page",
      "class_name": "",
      "stub_type": "temp",
      "description": "临时函数",
      "severity": "high",
      "context": "def batch_page():\n    \"\"\"批量处理页面\"\"\"\n    return render_template('batch.html')"
    },
    {
      "file_path": "tests\\simple_web_app.py",
      "line_number": 390,
      "function_name": "dashboard_page",
      "class_name": "",
      "stub_type": "temp",
      "description": "临时函数",
      "severity": "high",
      "context": "def dashboard_page():\n    \"\"\"仪表板页面\"\"\"\n    return render_template('dashboard.html')"
    },
    {
      "file_path": "tests\\test_e2e_complete_system.py",
      "line_number": 476,
      "function_name": "test_network_disconnect",
      "class_name": "",
      "stub_type": "mock",
      "description": "模拟/测试函数",
      "severity": "low",
      "context": "def test_network_disconnect():\n    # 断网场景无法自动模拟，但可检测 API 不可达时前端提示\n    pass  # 需手动或用 mock 工具实现"
    },
    {
      "file_path": "tests\\test_integration.py",
      "line_number": 81,
      "function_name": "tearDown",
      "class_name": "",
      "stub_type": "temp",
      "description": "临时函数",
      "severity": "high",
      "context": "    def tearDown(self):\n        \"\"\"测试后清理\"\"\"\n        if os.path.exists(self.temp_dir):\n            shutil.rmtree(self.temp_dir)"
    },
    {
      "file_path": "tests\\test_llm_integration.py",
      "line_number": 163,
      "function_name": "performance_client",
      "class_name": "",
      "stub_type": "mock",
      "description": "模拟/测试函数",
      "severity": "low",
      "context": "    def performance_client(self):\n        \"\"\"Create a client for performance testing.\"\"\"\n        return Mock(spec=BaseLLMClient)"
    },
    {
      "file_path": "tests\\test_llm_integration.py",
      "line_number": 170,
      "function_name": "mock_generate_with_delay",
      "class_name": "",
      "stub_type": "mock",
      "description": "模拟/测试函数",
      "severity": "low",
      "context": "        def mock_generate_with_delay(prompt):\n            time.sleep(0.1)  # Simulate API delay\n            return \"Performance test response\""
    },
    {
      "file_path": "tests\\test_orchestrator.py",
      "line_number": 37,
      "function_name": "mock_llm_client",
      "class_name": "",
      "stub_type": "mock",
      "description": "模拟/测试函数",
      "severity": "low",
      "context": "def mock_llm_client():\n    return MockLLMClientForTests()"
    },
    {
      "file_path": "tests\\test_orchestrator.py",
      "line_number": 41,
      "function_name": "orchestrator",
      "class_name": "",
      "stub_type": "mock",
      "description": "模拟/测试函数",
      "severity": "low",
      "context": "def orchestrator(mock_llm_client):\n    kb_path = \"src/core/knowledge_base\"\n    return AgentOrchestrator(llm_client=mock_llm_client, kb_path=kb_path)"
    },
    {
      "file_path": "tests\\test_writing_style.py",
      "line_number": 70,
      "function_name": "tearDown",
      "class_name": "",
      "stub_type": "temp",
      "description": "临时函数",
      "severity": "high",
      "context": "    def tearDown(self):\n        \"\"\"测试后清理\"\"\"\n        if os.path.exists(self.temp_dir):\n            shutil.rmtree(self.temp_dir)"
    },
    {
      "file_path": "tools\\code_template_generator.py",
      "line_number": 237,
      "function_name": "_python_class_template",
      "class_name": "",
      "stub_type": "todo_fixme",
      "description": "包含TODO或FIXME注释",
      "severity": "high",
      "context": "    def _python_class_template(self, class_name: str, description: str, **kwargs) -> str:\n        \"\"\"\n        生成Python类模板\n        \n        Args:\n            class_name (str): 类名\n            descriptio..."
    },
    {
      "file_path": "tools\\code_template_generator.py",
      "line_number": 529,
      "function_name": "_test_file_template",
      "class_name": "",
      "stub_type": "todo_fixme",
      "description": "包含TODO或FIXME注释",
      "severity": "high",
      "context": "    def _test_file_template(self, test_name: str, description: str, **kwargs) -> str:\n        \"\"\"\n        生成测试文件模板\n        \n        Args:\n            test_name (str): 测试名称\n            description (str..."
    },
    {
      "file_path": "tools\\method_implementation_checker.py",
      "line_number": 177,
      "function_name": "_is_real_implementation",
      "class_name": "",
      "stub_type": "todo_fixme",
      "description": "包含TODO或FIXME注释",
      "severity": "high",
      "context": "    def _is_real_implementation(self, method) -> bool:\n        \"\"\"检查方法是否是真实实现（不是占位符）\"\"\"\n        try:\n            # 获取方法的源代码\n            source = inspect.getsource(method)\n            \n            # 检查..."
    }
  ]
}
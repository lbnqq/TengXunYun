name: aiDoc CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          pip install flake8
          # Check for syntax errors and undefined names only
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Check application structure
        run: |
          python -c "
          import sys
          sys.path.insert(0, 'src')
          try:
              import web_app
              print('✅ Main application imports successfully')
          except ImportError as e:
              print(f'❌ Import error: {e}')
              sys.exit(1)
          "
      - name: Fail if API diff found
        run: |
          if grep -q '建议:' api_usage_diff_report.md; then echo 'API实现与文档不一致，禁止合并！'; exit 1; fi
      - name: Fail if id diff found
        run: |
          if grep -q '建议:' id_usage_diff_report.md; then echo '页面元素id实现与对照表不一致，禁止合并！'; exit 1; fi
      - name: API协议与Content-Type一致性校验
        run: |
          python tools/compare_api_usage_with_doc.py
          python tools/compare_id_usage_with_report.py
          # 检查所有API返回结构，禁止HTML/未定义结构
          python tools/project_status_checker.py --check-api-structure
          # 检查前端API调用点Content-Type和参数传递方式
          python tools/project_status_checker.py --check-frontend-api-usage
      - name: 检查高频易错点防控报告变更
        run: |
          git fetch origin master
          if git diff --name-only origin/master...HEAD | grep 'docs/高频易错点防控与扫描报告.md'; then
            echo '⚠️ 高频易错点防控与扫描报告有变更，请重点评审本报告内容，确保规范和CI同步更新！';
          else
            echo '高频易错点防控报告无变更。';
          fi 